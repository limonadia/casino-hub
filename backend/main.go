package main

import (
    "database/sql"
    "encoding/json"
    "log"
    "math/rand"
    "net/http"
    "time"

    _ "github.com/go-sql-driver/mysql"
    httpSwagger "github.com/swaggo/http-swagger"
    _ "casino-hub/backend/docs"
 // generated by swag init
)

var db *sql.DB

// @title Casino Hub API
// @version 1.0
// @description Simple casino games backend in Go with MySQL
// @host localhost:8080
// @BasePath /

// ---- Database Setup ----
func initDB() {
    var err error
    dsn := "casino_user:password123@tcp(127.0.0.1:3306)/casino_hub"
    db, err = sql.Open("mysql", dsn)
    if err != nil {
        log.Fatal(err)
    }

    if err = db.Ping(); err != nil {
        log.Fatal("❌ Failed to connect to database:", err)
    }

    log.Println("✅ Connected to MySQL")
}

// ---- Helpers ----
func getOrCreateUser(username string) (int, error) {
    var balance int
    err := db.QueryRow("SELECT balance FROM users WHERE username = ?", username).Scan(&balance)

    if err == sql.ErrNoRows {
        _, err = db.Exec("INSERT INTO users (username, balance) VALUES (?, ?)", username, 1000)
        if err != nil {
            return 0, err
        }
        return 1000, nil
    }
    return balance, err
}

func updateBalance(username string, balance int) error {
    _, err := db.Exec("UPDATE users SET balance = ? WHERE username = ?", balance, username)
    return err
}

// ---- Handlers ----
// getBalance godoc
// @Summary Get balance
// @Description Returns current user balance
// @Tags balance
// @Produce json
// @Success 200 {object} map[string]int
// @Router /api/balance [get]
func getBalance(w http.ResponseWriter, r *http.Request) {
    username := "demo"
    balance, _ := getOrCreateUser(username)
    json.NewEncoder(w).Encode(map[string]int{"balance": balance})
}

// resetBalance godoc
// @Summary Reset balance
// @Description Resets user balance to 1000
// @Tags balance
// @Produce json
// @Success 200 {object} map[string]int
// @Router /api/reset [post]
func resetBalance(w http.ResponseWriter, r *http.Request) {
    username := "demo"
    err := updateBalance(username, 1000)
    if err != nil {
        http.Error(w, "Database error", http.StatusInternalServerError)
        return
    }
    json.NewEncoder(w).Encode(map[string]int{"balance": 1000})
}

// playSlot godoc
// @Summary Play slot machine
// @Description Deducts 100, 20% chance win 500
// @Tags games
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]string
// @Router /api/slot [post]
func playSlot(w http.ResponseWriter, r *http.Request) {
    username := "demo"
    balance, _ := getOrCreateUser(username)

    if balance < 100 {
        http.Error(w, "Not enough balance", http.StatusBadRequest)
        return
    }

    balance -= 100
    outcome := "lose"
    if rand.Intn(5) == 0 {
        balance += 500
        outcome = "win"
    }

    updateBalance(username, balance)

    json.NewEncoder(w).Encode(map[string]interface{}{
        "outcome": outcome,
        "balance": balance,
    })
}

// ---- Main ----
func main() {
    rand.Seed(time.Now().UnixNano())
    initDB()
    defer db.Close()

    http.HandleFunc("/api/balance", getBalance)
    http.HandleFunc("/api/reset", resetBalance)
    http.HandleFunc("/api/slot", playSlot)

    // Swagger endpoint
    http.Handle("/swagger/", httpSwagger.WrapHandler)

    log.Println("✅ Casino Hub backend running on :8080")
    log.Fatal(http.ListenAndServe(":8080", nil))
}